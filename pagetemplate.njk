<!DOCTYPE html>
<html>
  <head>
    <title>System Information Dashboard</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        background-color: #0B0A14;
        margin: 0;
        padding: 0;
      }
      .custom-footer {
          padding: 10px;
          margin-bottom: 10px; /* Add a small bottom margin */
          }


      .dashboard {
        width: 100%;
        max-width: 1280px;
        margin: 17px auto;
        background-color: #0D0D15; // #2c3e50; /* Darker background for the entire dashboard */
        border-radius: 10px;
        box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.2);
        padding: 20px;
        color: #A6A6B0;
        /* Light text color for the entire dashboard */
      }

      .section {
        margin-bottom: 10px;
        background-color: #1B1B2A;//#303332; //#3498db;
        /* Blue background for sections */
        color:#A6A6B0;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
        font-size: 15px;
      }

      .section-title {
        font-size: 24px;
        margin-bottom: 10px;
        color: #A6A6B0; // #ecf0f1; /* Light text color for section titles */
      }

      .widget {
        background-color: black; // //#2c3e50; /* Darker background for widgets */
        border: 1px solid #34495e;
        /* Slightly lighter border color */
        border-radius: 5px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.1);
      }

      .widget-title {
        font-size: 18px;
        margin-bottom: 10px;
        color: #3498db;
        /* Blue text color for widget titles */
      }

      .data-table-container {
        max-height: 200px;
        overflow: auto;
        /* background-color: black; //#333; */
      }

      .data-table {
        width: 100%;
        border-collapse: collapse;
      }

      .data-table th,
      .data-table td {
        border: 1px solid #555;
        padding: 5px;
        text-align: left;
      }

      .data-table th {
        background-color: black;
        /* Blue background for table headers */
        position: sticky;
        top: 0;
        z-index: 1;
      }
        .data-table tbody{     
          overflow-y: auto;
        }

      .data-table1-container {
        max-height: 200px;
        overflow: auto;
        /* background-color: black; //#333; */
      }

            .data-table1 {
        width: 100%;
        border-collapse: collapse;
      }

      .data-table1 th {
        background-color: black;
        /* Blue background for table headers */
        position: sticky;
        top: 0;
        z-index: 1;
      }
      
      
      .data-table1 th,
      .data-table1 td {
        border: 1px solid #555;
        color:#A6A6B0;
        padding: 5px;
        text-align: left;
      }

      .data-table1 th {
        background-color: black;
        /* Blue background for table headers */
        position: sticky;
        top: 0;
        z-index: 1;
      }

      .data-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 5px;
      }

      .grid-item {
        border: 1px solid #555;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
        /* Drop shadow for grid items */
        background-color: #0D0D15; /* Blue background for grid items */ --->RS inner card bg for network,DATABASE .the outer cards 
        transition: transform 0.8s ease;
        /* Added smooth transform transition */
      }

      .grid-item:hover {
        transform: scale(1.05);
        /* Zoom in on hover */
      }

      .grid-label {
        font-weight: bold;
        color: White;
        /* Dark text color for labels */
      }

      .system-info {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px; 
      }

      .info-item {
        border: 1px solid #555;
        padding: 5px;
        border-radius: 5px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
        /* Drop shadow for info items */
        background-color: #0D0D15; //#3498db; /* Blue background for info items */ --->RSS SYSTEM CARDS BG INNER
        transition: transform 0.8s ease;
        /* Added smooth transform transition */
      }

      .info-item:hover {
        transform: scale(1.05);
        /* Zoom in on hover */
      }

      .info-label {
        font-weight: bold;
        color: #A6A6B0;
        /* Dark text color for labels */
      }

      .info-value {
        margin-top: 10px;
      }

      .formatted-value {
        font-weight: normal;
      }

      .section-container {
        display: grid;
        grid-template-columns: 1fr 2fr;
        /* Two equal-width columns */
        gap: 20px;
        /* Gap between columns */
      }

      .header-row {
        background-color: black;
        /* Blue background for header row */
        color: white;
        /* White text color for header row */
      }

      .action-button {
        background-color: #27ae60;
        /* Green background for buttons */
        color: #ecf0f1;
        /* Light text color for buttons */
        border: none;
        padding: 5px 10px;
        margin: 0 5px;
        cursor: pointer;
        border-radius: 5px;
        transition: background-color 0.3s ease;
      }

      .action-button:hover {
        background-color: #219a52;
        /* Darker green color on hover */
      }

      .table-header {
        background-color: #333;
        /* Dark grey background color for the header row */
        color: white;
        /* White text color for the header row */
        position: sticky;
        top: 0;
        z-index: 1;
      }

      .data-table {
        width: 100%;
        border-collapse: collapse;
        border-radius: 10px;
        /* Rounded corners for the table */
        overflow: hidden;
        /* Ensures rounded corners are applied */
        margin-top: -1px;
        /* Adjust the margin-top to avoid a small gap between the header and the table */
      }

      .data-table1{
        background-color: #3F3F4F;
               width: 100%;
        border-collapse: collapse;
        border-radius: 10px;
        /* Rounded corners for the table */
        overflow: hidden;
        /* Ensures rounded corners are applied */
        margin-top: -1px;
      }

      .modal-content  {
        background-color: #0D0D15;
        /* Set to transparent to avoid additional background in the modal */
        color: White;
      }

      #modal-prevent-closing  {
        background-color: black;//rgba(11, 10, 20, 0.7); ;
      }
      .b-close {
  color: white !important;
}

.process-item {
        border: 1px solid #555;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
        /* Drop shadow for grid items */
        background-color: #0D0D15; /* Blue background for grid items */ --->RS inner card bg for network,DATABASE .the outer cards 
        transition: transform 0.8s ease;
        /* Added smooth transform transition */
        display:flex;
        justify-content:space-between;

      }

    </style>
  </head>
  <body>
  <div>
    <b-alert
      :show="dismissCountDown"
      dismissible
      variant="warning"
      @dismissed="dismissCountDown=0"
      @dismiss-count-down="countDownChanged"
    >
 seconds...
    </b-alert>  </div>

    <div class="dashboard">
      <div class="section">
        <div class="section-title">Network Information</div>
        <div class="data-grid">
          <div class="grid-item">
            <span class="grid-label">IP Address:</span>            
            <span>{{netw_info_ip}}</span>
          </div>
          <div class="grid-item">
            <span class="grid-label">Connection Status:</span>
            <span>{{netw_status}}</span>
          </div>

          <div class="grid-item">
            <span class="grid-label">Type:</span>
            <span>{{netwr_name}}</span>
          </div>
        </div>
      </div>
      <div class="section-container">
        <div class="section">
          <div class="section-title">System Information</div>
          <div class="system-info">
            <div class="info-item">
              <div class="info-label">Hostname:</div>
              <div class="info-value">
                {{hostname}}
              </div>
            </div>
            <div class="info-item">
              <div class="info-label">Uptime:</div>
              <div class="info-value">
                <span >{{uptime}}</span> Hours
              </div>
            </div>
            <div class="info-item">
              <div class="info-label">Platform:</div>
              <div class="info-value">
                <span >{{platform}}</span>
              </div>
            </div>
            <div class="info-item">
              <div class="info-label">Type:</div>
              <div class="info-value">
                <span >{{type}}</span>
              </div>
            </div>
            <div class="info-item">
              <div class="info-label">Architecture:</div>
              <div class="info-value">
                <span >{{arch}}</span>
              </div>
            </div>
            <div class="info-item">
              <div class="info-label">Release:</div>
              <div class="info-value">
                <span >{{release}}</span>
              </div>
            </div>
            <div class="info-item">
              <div class="info-label">CPU Core Count:</div>
              <div class="info-value">
                <span >{{cpu_core}}</span>
              </div>
            </div>
            <div class="info-item">
              <div class="info-label">RAM:</div>
              <div class="info-value">
                <div class="formatted-value">Total: <span>{{ram_tot}}</span> GB </div>
                <div class="formatted-value">Free: <span>{{ram_free}}</span> GB </div>
              </div>
            </div>
          </div>
        </div>
        <div class="section">
          <div class="section-title">Database Information</div>
          <div class="grid-item">
            <div class="grid-label">Oracle Version:</div>
            <div class="grid-value">{{db_BANNER}}</div>
            <!-- <div class="grid-value">{{db_version}}</div> -->
          </div>
          <br />
          <div class="data-grid">
            <div class="grid-item">
              <div class="grid-label">Database Size:</div>
              <div class="grid-value">{{db_TOTAL_SIZE_MB}}</div>
            </div>
            <div class="grid-item">
              <div class="grid-label">RAM :</div>
              <div class="grid-value">Total: {{db_TOTALRAM}} GB</div>
              <div class="grid-value">Free: {{db_FREERAM}} GB</div>              
            </div>
            <div class="grid-item">
              <div class="grid-label">Current Schema:</div>
              <div class="grid-value">{{db_SCHEMA_NAME}}</div>
            </div>
            <div class="grid-item">
              <div class="grid-label">Total Tables:</div>
              <div class="grid-value">{{db_TOTAL_TABLES}}</div>
            </div>
            <div class="grid-item">
              <div class="grid-label">Timezone Version:</div>
              <div class="grid-value">{{db_tz_VERSION}}</div>
            </div>
            <div class="grid-item">
              <div class="grid-label">Startup Time:</div>
              <div class="grid-value">{{db_DATABASE_STARTUP_TIME}}</div>
            </div>
            <div class="grid-item">
              <div class="grid-label">CPU Usage:</div>
              <div class="grid-value">{{db_CPU_USAGE}}</div>
            </div>
            <div class="grid-item">
              <div class="grid-label">Total Users:</div>
              <div class="grid-value">{{db_TOTAL_USERS}}</div>
            </div>
          </div>
        </div>
      </div>
      <!-- Add this code inside the .section-container div, after the existing sections -->
      <div class="section">
        <div class="section-title">Log Analyzer</div>
        <div class="data-table-container">
          <table class="data-table">
            <thead class="table-header">
              <tr>
                <th>Service Name</th>
                <th>Log Folder Path</th>
                <th>Log Folder Size</th>
                <th>Actions</th>
                <!-- Added a column for actions -->
              </tr>
            </thead>            
                        <tbody>
                {% for item in loganalyzer %} 
<tr>
<td>{{item.serviceName}}</td> 
<td>{{item.logFolderPath}}</td> 
<td>{{item.logFolderSize}}</td>
<td>
                  <b-button v-b-modal.modal-prevent-closing @click="getlogfile(i.serviceName,i.logFolderPath)" >
                              <!-- <b-icon icon="tcloud-download-fill" aria-hidden="true"></b-icon> -->
View Logs
                  </b-button>
                </td>
</tr>

{% endfor %} 

            </tbody>
          </table>
        </div>
      </div>

      <b-modal size="xl" id="modal-prevent-closing" ref="modal" title="Log Information" @show="resetModal" @hidden="resetModal" @ok="handleOk" hide-footer>
        <div class="text-center" id="spin11"></div>
            <div class="data-table1-container">
        <b-table class="data-table1" striped bordered hover :items="logData" :fields="logFields" small>
          <template #cell(Action)="data" class="dashboard" >
            <b-button variant="primary" @click="handleDownload(data.index)"> Download </b-button>
            <b-button variant="danger" @click="handlePurge(data.index)"> Delete </b-button>
          </template>
        </b-table>
        
        
            </div>
        <div class="custom-footer d-flex justify-content-end">
          <!-- Your custom Cancel button -->
          <b-button variant="secondary" @click="$refs.modal.hide()">Close</b-button>
        </div>


      </b-modal>
  <b-spinner v-if="showSpinner" variant="grow" label="Spinning">Downloading....</b-spinner>












      <div class="section">
        <div class="section-title">Service Status</div>
        <div class="data-table-container">
          <table class="data-table">
            <thead class="table-header">
              <tr>
                <th>Service Name</th>
                <th>Folder Path</th>
                <!-- <th>Log Folder Size</th> -->
                <th>Actions</th>
                <!-- Added a column for actions -->
              </tr>
            </thead>            
                        <tbody>
                {% for item in loganalyzer %} 
<tr>
<td>{{item.serviceName}}</td> 
<td>{{item.logFolderPath}}</td> 
<!-- <td>{{item.logFolderSize}}</td> -->
<td>
                  <!-- <b-button v-b-modal.modal-prevent-closing @click="getstatus()" > -->
                    <b-button @click="getstatus()" >
                              <!-- <b-icon icon="tcloud-download-fill" aria-hidden="true"></b-icon> -->
Get Status
                  </b-button>
                </td>
</tr>

{% endfor %} 

            </tbody>
          </table>
        </div>
      </div>
    

          
  </body>
  <script>
    module.export = {
      data: {
        vData: [],
        raw: [],
        totram: [],
        freeram: [],
        systeminfo: [],
        network: [],
        networkstatus: [],
        loganalyzer: [],
        name: '',
        nameState: null,
        submittedNames: [],
        logData1: {},
        logData : [{
    Filepath: 'C:\\IDEAL6_DEV\\nodeconsumer\\Logs\\2023-09-25-result.log',
    Logname: '2023-09-25-result.log',
    Size: '7.26 KB'
  },
  {
    Filepath: 'C:\\IDEAL6_DEV\\nodeconsumer\\Logs\\2023-12-07-result.log',
    Logname: '2023-12-07-result.log',
    Size: '14.01 KB'
  }],
        logFields: ['Logname', 'Size', 'Action'],
        showSpinner:false,
        dismissSecs: 5,
        dismissCountDown: 0,
        currlogname:"",
        currlogpath:""
      },
      methods: {
        checkFormValidity() {
          const valid = this.$refs.form.checkValidity()
          this.nameState = valid
          return valid
        },
        getlogfile(name,path){
          this.$store.commit("loading", true);
          this.currlogname= name;
          this.currlogpath= path;
          this.$credCAPI.collection().create({
            body: {
              name: name,
              path: path
            },
            requestURL: "/idealj2/api/getlogfiles"
          }).then((result) => {
          //  console.log(JSON.stringify(result));
            this.logData = result;
            this.$store.commit("loading", false);
          }).catch((error) => {
            this.$store.commit("loading", false);
            console.error(error);
          });
        },
        getstatus(){
          alert('Service is Up!')
        },
        resetModal() {
          this.name = ''
          this.nameState = null
        },
        handleOk(bvModalEvent) {
          // Prevent modal from closing
          bvModalEvent.preventDefault()
          // Trigger submit handler
          this.handleSubmit()
        },
        handleDownload(index) {
              this.$store.commit("loading", true);
              this.showSpinner = true;
              const requestData = this.logData[index];
                this.$credCAPI.collection().create({
                  body: requestData,
                  requestURL: "/idealj2/api/downloadfile"
                }).then((result) => {
                const fileContent = new Blob([result.blob]);
                const filename = result.filename;
                // Create a link element and trigger a click event to download the file
                const link = document.createElement('a');
                link.href = window.URL.createObjectURL(fileContent);
                link.download = filename;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                  this.showSpinner = false;
                this.$store.commit("loading", false); // Stop the loading indicator
              })
              .catch(error => {
                this.showSpinner = false;
                this.$store.commit("loading", false);
                console.error(error);
              });
     },
        handlePurge(index) {
          this.$store.commit("loading", true);
          const requestData = this.logData[index];
                this.$credCAPI.collection().create({
                  body: requestData,
                  requestURL: "/idealj2/api/purgefile"
                }).then((result) => {
                   this.getlogfile(this.currlogname,this.currlogpath);
                  console.log(result)
                }).catch(error => {
                  console.error(error)
                });
          this.dismissCountDown = this.dismissSecs
          this.$store.commit("loading", false);
        },
        handleSubmit() {
          // Exit when the form isn't valid
          if (!this.checkFormValidity()) {
            return
          }
          // Push the name to submitted names
          this.submittedNames.push(this.name)
          // Hide the modal manually
          this.$nextTick(() => {
            this.$bvModal.hide('modal-prevent-closing')
          })
        },
        countDownChanged(dismissCountDown) {
        this.dismissCountDown = dismissCountDown
       }
      }
    }
  </script>
</html>